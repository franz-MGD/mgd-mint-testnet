/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MGDAbiInterface extends utils.Interface {
  functions: {
    "addArtistToOrg(string,string,address)": FunctionFragment;
    "addGovernance(address)": FunctionFragment;
    "addIGovernance(address)": FunctionFragment;
    "addOrgGovernance(string,address)": FunctionFragment;
    "artists(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "createOrganization(string,string,address)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "flaggedNFTS(uint256)": FunctionFragment;
    "governance(address)": FunctionFragment;
    "hasAuthorization(address,string)": FunctionFragment;
    "initialGovernanceList(address)": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isIGovernance(address)": FunctionFragment;
    "isPaused()": FunctionFragment;
    "metadata(uint256)": FunctionFragment;
    "mgdContract(address)": FunctionFragment;
    "mint(string,string,address,address,address,uint256,uint24,bool)": FunctionFragment;
    "name()": FunctionFragment;
    "orgTaken(string)": FunctionFragment;
    "orgs(string)": FunctionFragment;
    "removeArtist(string,address)": FunctionFragment;
    "removeGovernance(address)": FunctionFragment;
    "removeIGovernance(address)": FunctionFragment;
    "removeOrgGovernance(string,address)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMGDcontract(address)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenCount()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "triggerPause()": FunctionFragment;
    "unlockPlatform(address)": FunctionFragment;
    "updateMetadata(uint256,string,address,uint24)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addArtistToOrg"
      | "addGovernance"
      | "addIGovernance"
      | "addOrgGovernance"
      | "artists"
      | "balanceOf"
      | "balanceOfBatch"
      | "baseTokenURI"
      | "createOrganization"
      | "exists"
      | "flaggedNFTS"
      | "governance"
      | "hasAuthorization"
      | "initialGovernanceList"
      | "initialize"
      | "isApprovedForAll"
      | "isIGovernance"
      | "isPaused"
      | "metadata"
      | "mgdContract"
      | "mint"
      | "name"
      | "orgTaken"
      | "orgs"
      | "removeArtist"
      | "removeGovernance"
      | "removeIGovernance"
      | "removeOrgGovernance"
      | "royaltyInfo"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setMGDcontract"
      | "setName"
      | "supportsInterface"
      | "tokenCount"
      | "totalSupply"
      | "triggerPause"
      | "unlockPlatform"
      | "updateMetadata"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addArtistToOrg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addIGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrgGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "artists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flaggedNFTS",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuthorization",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialGovernanceList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mgdContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orgTaken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "orgs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeArtist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrgGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMGDcontract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPlatform",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addArtistToOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrgGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flaggedNFTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialGovernanceList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mgdContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orgTaken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orgs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOrgGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMGDcontract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ArtistAdded(address,string,string)": EventFragment;
    "ArtistRemoved(string,address)": EventFragment;
    "GovernanceAdded(address)": EventFragment;
    "GovernanceRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetadataUpdate(uint256,address,string,address,uint24)": EventFragment;
    "Mint(uint256,address,address,address,uint24,uint256,string,bool)": EventFragment;
    "MintOrg(uint256,string)": EventFragment;
    "NFTflagged(uint256)": EventFragment;
    "OrgDataUpdated(string,string)": EventFragment;
    "OrgGovernanceAdded(string,address)": EventFragment;
    "OrgGovernanceRemoved(string,address)": EventFragment;
    "OrganizationCreated(string,string,address)": EventFragment;
    "PlatformPaused(bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtistAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtistRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintOrg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTflagged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrgDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrgGovernanceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrgGovernanceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrganizationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ArtistAddedEventObject {
  artist: string;
  organization: string;
  metadata: string;
}
export type ArtistAddedEvent = TypedEvent<
  [string, string, string],
  ArtistAddedEventObject
>;

export type ArtistAddedEventFilter = TypedEventFilter<ArtistAddedEvent>;

export interface ArtistRemovedEventObject {
  _orgName: string;
  _address: string;
}
export type ArtistRemovedEvent = TypedEvent<
  [string, string],
  ArtistRemovedEventObject
>;

export type ArtistRemovedEventFilter = TypedEventFilter<ArtistRemovedEvent>;

export interface GovernanceAddedEventObject {
  _address: string;
}
export type GovernanceAddedEvent = TypedEvent<
  [string],
  GovernanceAddedEventObject
>;

export type GovernanceAddedEventFilter = TypedEventFilter<GovernanceAddedEvent>;

export interface GovernanceRemovedEventObject {
  _address: string;
}
export type GovernanceRemovedEvent = TypedEvent<
  [string],
  GovernanceRemovedEventObject
>;

export type GovernanceRemovedEventFilter =
  TypedEventFilter<GovernanceRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetadataUpdateEventObject {
  id: BigNumber;
  author: string;
  metadataUri: string;
  royaltyReceiver: string;
  royalty: number;
}
export type MetadataUpdateEvent = TypedEvent<
  [BigNumber, string, string, string, number],
  MetadataUpdateEventObject
>;

export type MetadataUpdateEventFilter = TypedEventFilter<MetadataUpdateEvent>;

export interface MintEventObject {
  id: BigNumber;
  author: string;
  to: string;
  royaltyReceiver: string;
  royalty: number;
  issues: BigNumber;
  metadataUri: string;
  splitPayable: boolean;
}
export type MintEvent = TypedEvent<
  [BigNumber, string, string, string, number, BigNumber, string, boolean],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MintOrgEventObject {
  tokenId: BigNumber;
  orgName: string;
}
export type MintOrgEvent = TypedEvent<[BigNumber, string], MintOrgEventObject>;

export type MintOrgEventFilter = TypedEventFilter<MintOrgEvent>;

export interface NFTflaggedEventObject {
  tokenId: BigNumber;
}
export type NFTflaggedEvent = TypedEvent<[BigNumber], NFTflaggedEventObject>;

export type NFTflaggedEventFilter = TypedEventFilter<NFTflaggedEvent>;

export interface OrgDataUpdatedEventObject {
  _orgName: string;
  newURI: string;
}
export type OrgDataUpdatedEvent = TypedEvent<
  [string, string],
  OrgDataUpdatedEventObject
>;

export type OrgDataUpdatedEventFilter = TypedEventFilter<OrgDataUpdatedEvent>;

export interface OrgGovernanceAddedEventObject {
  organization: string;
  _address: string;
}
export type OrgGovernanceAddedEvent = TypedEvent<
  [string, string],
  OrgGovernanceAddedEventObject
>;

export type OrgGovernanceAddedEventFilter =
  TypedEventFilter<OrgGovernanceAddedEvent>;

export interface OrgGovernanceRemovedEventObject {
  _orgName: string;
  _address: string;
}
export type OrgGovernanceRemovedEvent = TypedEvent<
  [string, string],
  OrgGovernanceRemovedEventObject
>;

export type OrgGovernanceRemovedEventFilter =
  TypedEventFilter<OrgGovernanceRemovedEvent>;

export interface OrganizationCreatedEventObject {
  organization: string;
  metadata: string;
  orgAdmin: string;
}
export type OrganizationCreatedEvent = TypedEvent<
  [string, string, string],
  OrganizationCreatedEventObject
>;

export type OrganizationCreatedEventFilter =
  TypedEventFilter<OrganizationCreatedEvent>;

export interface PlatformPausedEventObject {
  _isPaused: boolean;
}
export type PlatformPausedEvent = TypedEvent<
  [boolean],
  PlatformPausedEventObject
>;

export type PlatformPausedEventFilter = TypedEventFilter<PlatformPausedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface MGDAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MGDAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addArtistToOrg(
      _orgName: PromiseOrValue<string>,
      _artistData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    artists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    createOrganization(
      _orgName: PromiseOrValue<string>,
      _orgData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    flaggedNFTS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAuthorization(
      _address: PromiseOrValue<string>,
      _orgName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialGovernanceList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number, boolean] & {
        metadataUri: string;
        orgName: string;
        author: string;
        royaltyReceiver: string;
        royalty: number;
        splitPayable: boolean;
      }
    >;

    mgdContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _orgName: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _author: PromiseOrValue<string>,
      _issues: PromiseOrValue<BigNumberish>,
      _royalty: PromiseOrValue<BigNumberish>,
      _splitPayable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    orgTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    orgs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { orgDataURI: string }>;

    removeArtist(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _receiver: string; _royaltyAmount: BigNumber }
    >;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMGDcontract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    triggerPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockPlatform(
      _mgdContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      _metadataUri: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addArtistToOrg(
    _orgName: PromiseOrValue<string>,
    _artistData: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addGovernance(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addIGovernance(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOrgGovernance(
    _orgName: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  artists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  createOrganization(
    _orgName: PromiseOrValue<string>,
    _orgData: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  flaggedNFTS(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAuthorization(
    _address: PromiseOrValue<string>,
    _orgName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialGovernanceList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIGovernance(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  metadata(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, number, boolean] & {
      metadataUri: string;
      orgName: string;
      author: string;
      royaltyReceiver: string;
      royalty: number;
      splitPayable: boolean;
    }
  >;

  mgdContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _orgName: PromiseOrValue<string>,
    _metadataUri: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _royaltyReceiver: PromiseOrValue<string>,
    _author: PromiseOrValue<string>,
    _issues: PromiseOrValue<BigNumberish>,
    _royalty: PromiseOrValue<BigNumberish>,
    _splitPayable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  orgTaken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  orgs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeArtist(
    _orgName: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeGovernance(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeIGovernance(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOrgGovernance(
    _orgName: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { _receiver: string; _royaltyAmount: BigNumber }
  >;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMGDcontract(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  triggerPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockPlatform(
    _mgdContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMetadata(
    _tokenId: PromiseOrValue<BigNumberish>,
    _metadataUri: PromiseOrValue<string>,
    _royaltyReceiver: PromiseOrValue<string>,
    _royalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addArtistToOrg(
      _orgName: PromiseOrValue<string>,
      _artistData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    artists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    createOrganization(
      _orgName: PromiseOrValue<string>,
      _orgData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flaggedNFTS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAuthorization(
      _address: PromiseOrValue<string>,
      _orgName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialGovernanceList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number, boolean] & {
        metadataUri: string;
        orgName: string;
        author: string;
        royaltyReceiver: string;
        royalty: number;
        splitPayable: boolean;
      }
    >;

    mgdContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _orgName: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _author: PromiseOrValue<string>,
      _issues: PromiseOrValue<BigNumberish>,
      _royalty: PromiseOrValue<BigNumberish>,
      _splitPayable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    orgTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    orgs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeArtist(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _receiver: string; _royaltyAmount: BigNumber }
    >;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMGDcontract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerPause(overrides?: CallOverrides): Promise<void>;

    unlockPlatform(
      _mgdContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      _metadataUri: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ArtistAdded(address,string,string)"(
      artist?: null,
      organization?: null,
      metadata?: null
    ): ArtistAddedEventFilter;
    ArtistAdded(
      artist?: null,
      organization?: null,
      metadata?: null
    ): ArtistAddedEventFilter;

    "ArtistRemoved(string,address)"(
      _orgName?: null,
      _address?: null
    ): ArtistRemovedEventFilter;
    ArtistRemoved(_orgName?: null, _address?: null): ArtistRemovedEventFilter;

    "GovernanceAdded(address)"(_address?: null): GovernanceAddedEventFilter;
    GovernanceAdded(_address?: null): GovernanceAddedEventFilter;

    "GovernanceRemoved(address)"(_address?: null): GovernanceRemovedEventFilter;
    GovernanceRemoved(_address?: null): GovernanceRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetadataUpdate(uint256,address,string,address,uint24)"(
      id?: PromiseOrValue<BigNumberish> | null,
      author?: null,
      metadataUri?: null,
      royaltyReceiver?: PromiseOrValue<string> | null,
      royalty?: null
    ): MetadataUpdateEventFilter;
    MetadataUpdate(
      id?: PromiseOrValue<BigNumberish> | null,
      author?: null,
      metadataUri?: null,
      royaltyReceiver?: PromiseOrValue<string> | null,
      royalty?: null
    ): MetadataUpdateEventFilter;

    "Mint(uint256,address,address,address,uint24,uint256,string,bool)"(
      id?: null,
      author?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      royaltyReceiver?: null,
      royalty?: null,
      issues?: null,
      metadataUri?: null,
      splitPayable?: null
    ): MintEventFilter;
    Mint(
      id?: null,
      author?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      royaltyReceiver?: null,
      royalty?: null,
      issues?: null,
      metadataUri?: null,
      splitPayable?: null
    ): MintEventFilter;

    "MintOrg(uint256,string)"(
      tokenId?: null,
      orgName?: null
    ): MintOrgEventFilter;
    MintOrg(tokenId?: null, orgName?: null): MintOrgEventFilter;

    "NFTflagged(uint256)"(tokenId?: null): NFTflaggedEventFilter;
    NFTflagged(tokenId?: null): NFTflaggedEventFilter;

    "OrgDataUpdated(string,string)"(
      _orgName?: null,
      newURI?: null
    ): OrgDataUpdatedEventFilter;
    OrgDataUpdated(_orgName?: null, newURI?: null): OrgDataUpdatedEventFilter;

    "OrgGovernanceAdded(string,address)"(
      organization?: null,
      _address?: null
    ): OrgGovernanceAddedEventFilter;
    OrgGovernanceAdded(
      organization?: null,
      _address?: null
    ): OrgGovernanceAddedEventFilter;

    "OrgGovernanceRemoved(string,address)"(
      _orgName?: null,
      _address?: null
    ): OrgGovernanceRemovedEventFilter;
    OrgGovernanceRemoved(
      _orgName?: null,
      _address?: null
    ): OrgGovernanceRemovedEventFilter;

    "OrganizationCreated(string,string,address)"(
      organization?: null,
      metadata?: null,
      orgAdmin?: null
    ): OrganizationCreatedEventFilter;
    OrganizationCreated(
      organization?: null,
      metadata?: null,
      orgAdmin?: null
    ): OrganizationCreatedEventFilter;

    "PlatformPaused(bool)"(_isPaused?: null): PlatformPausedEventFilter;
    PlatformPaused(_isPaused?: null): PlatformPausedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    addArtistToOrg(
      _orgName: PromiseOrValue<string>,
      _artistData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    artists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    createOrganization(
      _orgName: PromiseOrValue<string>,
      _orgData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flaggedNFTS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAuthorization(
      _address: PromiseOrValue<string>,
      _orgName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialGovernanceList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mgdContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _orgName: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _author: PromiseOrValue<string>,
      _issues: PromiseOrValue<BigNumberish>,
      _royalty: PromiseOrValue<BigNumberish>,
      _splitPayable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    orgTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orgs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeArtist(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMGDcontract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockPlatform(
      _mgdContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      _metadataUri: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addArtistToOrg(
      _orgName: PromiseOrValue<string>,
      _artistData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    artists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrganization(
      _orgName: PromiseOrValue<string>,
      _orgData: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flaggedNFTS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAuthorization(
      _address: PromiseOrValue<string>,
      _orgName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialGovernanceList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mgdContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _orgName: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _author: PromiseOrValue<string>,
      _issues: PromiseOrValue<BigNumberish>,
      _royalty: PromiseOrValue<BigNumberish>,
      _splitPayable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orgTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orgs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeArtist(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeIGovernance(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOrgGovernance(
      _orgName: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMGDcontract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockPlatform(
      _mgdContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      _metadataUri: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
